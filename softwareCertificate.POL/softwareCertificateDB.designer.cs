#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace softwareCertificate.POL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="softwareCertificate")]
	public partial class softwareCertificateDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertaccessUser(accessUser instance);
    partial void UpdateaccessUser(accessUser instance);
    partial void DeleteaccessUser(accessUser instance);
    partial void InsertzoneInfo(zoneInfo instance);
    partial void UpdatezoneInfo(zoneInfo instance);
    partial void DeletezoneInfo(zoneInfo instance);
    partial void InsertcompanyInfo(companyInfo instance);
    partial void UpdatecompanyInfo(companyInfo instance);
    partial void DeletecompanyInfo(companyInfo instance);
    partial void InsertDB(DB instance);
    partial void UpdateDB(DB instance);
    partial void DeleteDB(DB instance);
    partial void InsertmemariSystem(memariSystem instance);
    partial void UpdatememariSystem(memariSystem instance);
    partial void DeletememariSystem(memariSystem instance);
    partial void InsertprogramLanguage(programLanguage instance);
    partial void UpdateprogramLanguage(programLanguage instance);
    partial void DeleteprogramLanguage(programLanguage instance);
    partial void InsertsoftwareInfo(softwareInfo instance);
    partial void UpdatesoftwareInfo(softwareInfo instance);
    partial void DeletesoftwareInfo(softwareInfo instance);
    partial void Insertupgrade(upgrade instance);
    partial void Updateupgrade(upgrade instance);
    partial void Deleteupgrade(upgrade instance);
    partial void Insertuserinfo(userinfo instance);
    partial void Updateuserinfo(userinfo instance);
    partial void Deleteuserinfo(userinfo instance);
    partial void InsertvahedInfo(vahedInfo instance);
    partial void UpdatevahedInfo(vahedInfo instance);
    partial void DeletevahedInfo(vahedInfo instance);
    partial void InsertVahedUser(VahedUser instance);
    partial void UpdateVahedUser(VahedUser instance);
    partial void DeleteVahedUser(VahedUser instance);
    #endregion
		
		public softwareCertificateDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public softwareCertificateDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public softwareCertificateDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public softwareCertificateDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<accessUser> accessUsers
		{
			get
			{
				return this.GetTable<accessUser>();
			}
		}
		
		public System.Data.Linq.Table<zoneInfo> zoneInfos
		{
			get
			{
				return this.GetTable<zoneInfo>();
			}
		}
		
		public System.Data.Linq.Table<companyInfo> companyInfos
		{
			get
			{
				return this.GetTable<companyInfo>();
			}
		}
		
		public System.Data.Linq.Table<DB> DBs
		{
			get
			{
				return this.GetTable<DB>();
			}
		}
		
		public System.Data.Linq.Table<memariSystem> memariSystems
		{
			get
			{
				return this.GetTable<memariSystem>();
			}
		}
		
		public System.Data.Linq.Table<programLanguage> programLanguages
		{
			get
			{
				return this.GetTable<programLanguage>();
			}
		}
		
		public System.Data.Linq.Table<softwareInfo> softwareInfos
		{
			get
			{
				return this.GetTable<softwareInfo>();
			}
		}
		
		public System.Data.Linq.Table<upgrade> upgrades
		{
			get
			{
				return this.GetTable<upgrade>();
			}
		}
		
		public System.Data.Linq.Table<userinfo> userinfos
		{
			get
			{
				return this.GetTable<userinfo>();
			}
		}
		
		public System.Data.Linq.Table<vahedInfo> vahedInfos
		{
			get
			{
				return this.GetTable<vahedInfo>();
			}
		}
		
		public System.Data.Linq.Table<VahedUser> VahedUsers
		{
			get
			{
				return this.GetTable<VahedUser>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.accessUser")]
	public partial class accessUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _accessCode;
		
		private short _userCode;
		
		private short _vahedCode;
		
		private bool _deleted;
		
		private EntityRef<userinfo> _userinfo;
		
		private EntityRef<vahedInfo> _vahedInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnaccessCodeChanging(short value);
    partial void OnaccessCodeChanged();
    partial void OnuserCodeChanging(short value);
    partial void OnuserCodeChanged();
    partial void OnvahedCodeChanging(short value);
    partial void OnvahedCodeChanged();
    partial void OndeletedChanging(bool value);
    partial void OndeletedChanged();
    #endregion
		
		public accessUser()
		{
			this._userinfo = default(EntityRef<userinfo>);
			this._vahedInfo = default(EntityRef<vahedInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accessCode", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short accessCode
		{
			get
			{
				return this._accessCode;
			}
			set
			{
				if ((this._accessCode != value))
				{
					this.OnaccessCodeChanging(value);
					this.SendPropertyChanging();
					this._accessCode = value;
					this.SendPropertyChanged("accessCode");
					this.OnaccessCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userCode", DbType="SmallInt NOT NULL")]
		public short userCode
		{
			get
			{
				return this._userCode;
			}
			set
			{
				if ((this._userCode != value))
				{
					if (this._userinfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserCodeChanging(value);
					this.SendPropertyChanging();
					this._userCode = value;
					this.SendPropertyChanged("userCode");
					this.OnuserCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vahedCode", DbType="SmallInt NOT NULL")]
		public short vahedCode
		{
			get
			{
				return this._vahedCode;
			}
			set
			{
				if ((this._vahedCode != value))
				{
					if (this._vahedInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnvahedCodeChanging(value);
					this.SendPropertyChanging();
					this._vahedCode = value;
					this.SendPropertyChanged("vahedCode");
					this.OnvahedCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deleted", DbType="Bit NOT NULL")]
		public bool deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userinfo_accessUser", Storage="_userinfo", ThisKey="userCode", OtherKey="userCode", IsForeignKey=true)]
		public userinfo userinfo
		{
			get
			{
				return this._userinfo.Entity;
			}
			set
			{
				userinfo previousValue = this._userinfo.Entity;
				if (((previousValue != value) 
							|| (this._userinfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userinfo.Entity = null;
						previousValue.accessUsers.Remove(this);
					}
					this._userinfo.Entity = value;
					if ((value != null))
					{
						value.accessUsers.Add(this);
						this._userCode = value.userCode;
					}
					else
					{
						this._userCode = default(short);
					}
					this.SendPropertyChanged("userinfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="vahedInfo_accessUser", Storage="_vahedInfo", ThisKey="vahedCode", OtherKey="vahedCode", IsForeignKey=true)]
		public vahedInfo vahedInfo
		{
			get
			{
				return this._vahedInfo.Entity;
			}
			set
			{
				vahedInfo previousValue = this._vahedInfo.Entity;
				if (((previousValue != value) 
							|| (this._vahedInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._vahedInfo.Entity = null;
						previousValue.accessUsers.Remove(this);
					}
					this._vahedInfo.Entity = value;
					if ((value != null))
					{
						value.accessUsers.Add(this);
						this._vahedCode = value.vahedCode;
					}
					else
					{
						this._vahedCode = default(short);
					}
					this.SendPropertyChanged("vahedInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.zoneInfo")]
	public partial class zoneInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _zoneCode;
		
		private string _zoneName;
		
		private bool _deleted;
		
		private EntitySet<softwareInfo> _softwareInfos;
		
		private EntitySet<userinfo> _userinfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnzoneCodeChanging(short value);
    partial void OnzoneCodeChanged();
    partial void OnzoneNameChanging(string value);
    partial void OnzoneNameChanged();
    partial void OndeletedChanging(bool value);
    partial void OndeletedChanged();
    #endregion
		
		public zoneInfo()
		{
			this._softwareInfos = new EntitySet<softwareInfo>(new Action<softwareInfo>(this.attach_softwareInfos), new Action<softwareInfo>(this.detach_softwareInfos));
			this._userinfos = new EntitySet<userinfo>(new Action<userinfo>(this.attach_userinfos), new Action<userinfo>(this.detach_userinfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_zoneCode", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short zoneCode
		{
			get
			{
				return this._zoneCode;
			}
			set
			{
				if ((this._zoneCode != value))
				{
					this.OnzoneCodeChanging(value);
					this.SendPropertyChanging();
					this._zoneCode = value;
					this.SendPropertyChanged("zoneCode");
					this.OnzoneCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_zoneName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string zoneName
		{
			get
			{
				return this._zoneName;
			}
			set
			{
				if ((this._zoneName != value))
				{
					this.OnzoneNameChanging(value);
					this.SendPropertyChanging();
					this._zoneName = value;
					this.SendPropertyChanged("zoneName");
					this.OnzoneNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deleted", DbType="Bit NOT NULL")]
		public bool deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zoneInfo_softwareInfo", Storage="_softwareInfos", ThisKey="zoneCode", OtherKey="zoneCode")]
		public EntitySet<softwareInfo> softwareInfos
		{
			get
			{
				return this._softwareInfos;
			}
			set
			{
				this._softwareInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zoneInfo_userinfo", Storage="_userinfos", ThisKey="zoneCode", OtherKey="zoneCode")]
		public EntitySet<userinfo> userinfos
		{
			get
			{
				return this._userinfos;
			}
			set
			{
				this._userinfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_softwareInfos(softwareInfo entity)
		{
			this.SendPropertyChanging();
			entity.zoneInfo = this;
		}
		
		private void detach_softwareInfos(softwareInfo entity)
		{
			this.SendPropertyChanging();
			entity.zoneInfo = null;
		}
		
		private void attach_userinfos(userinfo entity)
		{
			this.SendPropertyChanging();
			entity.zoneInfo = this;
		}
		
		private void detach_userinfos(userinfo entity)
		{
			this.SendPropertyChanging();
			entity.zoneInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.companyInfo")]
	public partial class companyInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _companyCode;
		
		private string _companyName;
		
		private bool _deleted;
		
		private string _address;
		
		private string _companyCity;
		
		private string _telephone;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncompanyCodeChanging(string value);
    partial void OncompanyCodeChanged();
    partial void OncompanyNameChanging(string value);
    partial void OncompanyNameChanged();
    partial void OndeletedChanging(bool value);
    partial void OndeletedChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OncompanyCityChanging(string value);
    partial void OncompanyCityChanged();
    partial void OntelephoneChanging(string value);
    partial void OntelephoneChanged();
    #endregion
		
		public companyInfo()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_companyCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string companyCode
		{
			get
			{
				return this._companyCode;
			}
			set
			{
				if ((this._companyCode != value))
				{
					this.OncompanyCodeChanging(value);
					this.SendPropertyChanging();
					this._companyCode = value;
					this.SendPropertyChanged("companyCode");
					this.OncompanyCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_companyName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string companyName
		{
			get
			{
				return this._companyName;
			}
			set
			{
				if ((this._companyName != value))
				{
					this.OncompanyNameChanging(value);
					this.SendPropertyChanging();
					this._companyName = value;
					this.SendPropertyChanged("companyName");
					this.OncompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deleted", DbType="Bit NOT NULL")]
		public bool deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_companyCity", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string companyCity
		{
			get
			{
				return this._companyCity;
			}
			set
			{
				if ((this._companyCity != value))
				{
					this.OncompanyCityChanging(value);
					this.SendPropertyChanging();
					this._companyCity = value;
					this.SendPropertyChanged("companyCity");
					this.OncompanyCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_telephone", DbType="Char(11) NOT NULL", CanBeNull=false)]
		public string telephone
		{
			get
			{
				return this._telephone;
			}
			set
			{
				if ((this._telephone != value))
				{
					this.OntelephoneChanging(value);
					this.SendPropertyChanging();
					this._telephone = value;
					this.SendPropertyChanged("telephone");
					this.OntelephoneChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB")]
	public partial class DB : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _dbCode;
		
		private string _name;
		
		private bool _deleted;
		
		private EntitySet<softwareInfo> _softwareInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndbCodeChanging(short value);
    partial void OndbCodeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndeletedChanging(bool value);
    partial void OndeletedChanged();
    #endregion
		
		public DB()
		{
			this._softwareInfos = new EntitySet<softwareInfo>(new Action<softwareInfo>(this.attach_softwareInfos), new Action<softwareInfo>(this.detach_softwareInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dbCode", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short dbCode
		{
			get
			{
				return this._dbCode;
			}
			set
			{
				if ((this._dbCode != value))
				{
					this.OndbCodeChanging(value);
					this.SendPropertyChanging();
					this._dbCode = value;
					this.SendPropertyChanged("dbCode");
					this.OndbCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deleted", DbType="Bit NOT NULL")]
		public bool deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_softwareInfo", Storage="_softwareInfos", ThisKey="dbCode", OtherKey="dbCode")]
		public EntitySet<softwareInfo> softwareInfos
		{
			get
			{
				return this._softwareInfos;
			}
			set
			{
				this._softwareInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_softwareInfos(softwareInfo entity)
		{
			this.SendPropertyChanging();
			entity.DB = this;
		}
		
		private void detach_softwareInfos(softwareInfo entity)
		{
			this.SendPropertyChanging();
			entity.DB = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.memariSystem")]
	public partial class memariSystem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _memariCode;
		
		private string _memariName;
		
		private bool _deleted;
		
		private EntitySet<softwareInfo> _softwareInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmemariCodeChanging(short value);
    partial void OnmemariCodeChanged();
    partial void OnmemariNameChanging(string value);
    partial void OnmemariNameChanged();
    partial void OndeletedChanging(bool value);
    partial void OndeletedChanged();
    #endregion
		
		public memariSystem()
		{
			this._softwareInfos = new EntitySet<softwareInfo>(new Action<softwareInfo>(this.attach_softwareInfos), new Action<softwareInfo>(this.detach_softwareInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_memariCode", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short memariCode
		{
			get
			{
				return this._memariCode;
			}
			set
			{
				if ((this._memariCode != value))
				{
					this.OnmemariCodeChanging(value);
					this.SendPropertyChanging();
					this._memariCode = value;
					this.SendPropertyChanged("memariCode");
					this.OnmemariCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_memariName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string memariName
		{
			get
			{
				return this._memariName;
			}
			set
			{
				if ((this._memariName != value))
				{
					this.OnmemariNameChanging(value);
					this.SendPropertyChanging();
					this._memariName = value;
					this.SendPropertyChanged("memariName");
					this.OnmemariNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deleted", DbType="Bit NOT NULL")]
		public bool deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="memariSystem_softwareInfo", Storage="_softwareInfos", ThisKey="memariCode", OtherKey="memariCode")]
		public EntitySet<softwareInfo> softwareInfos
		{
			get
			{
				return this._softwareInfos;
			}
			set
			{
				this._softwareInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_softwareInfos(softwareInfo entity)
		{
			this.SendPropertyChanging();
			entity.memariSystem = this;
		}
		
		private void detach_softwareInfos(softwareInfo entity)
		{
			this.SendPropertyChanging();
			entity.memariSystem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.programLanguage")]
	public partial class programLanguage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _programLangCode;
		
		private string _languageName;
		
		private bool _deleted;
		
		private EntitySet<softwareInfo> _softwareInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnprogramLangCodeChanging(short value);
    partial void OnprogramLangCodeChanged();
    partial void OnlanguageNameChanging(string value);
    partial void OnlanguageNameChanged();
    partial void OndeletedChanging(bool value);
    partial void OndeletedChanged();
    #endregion
		
		public programLanguage()
		{
			this._softwareInfos = new EntitySet<softwareInfo>(new Action<softwareInfo>(this.attach_softwareInfos), new Action<softwareInfo>(this.detach_softwareInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_programLangCode", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short programLangCode
		{
			get
			{
				return this._programLangCode;
			}
			set
			{
				if ((this._programLangCode != value))
				{
					this.OnprogramLangCodeChanging(value);
					this.SendPropertyChanging();
					this._programLangCode = value;
					this.SendPropertyChanged("programLangCode");
					this.OnprogramLangCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_languageName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string languageName
		{
			get
			{
				return this._languageName;
			}
			set
			{
				if ((this._languageName != value))
				{
					this.OnlanguageNameChanging(value);
					this.SendPropertyChanging();
					this._languageName = value;
					this.SendPropertyChanged("languageName");
					this.OnlanguageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deleted", DbType="Bit NOT NULL")]
		public bool deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="programLanguage_softwareInfo", Storage="_softwareInfos", ThisKey="programLangCode", OtherKey="languageCode")]
		public EntitySet<softwareInfo> softwareInfos
		{
			get
			{
				return this._softwareInfos;
			}
			set
			{
				this._softwareInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_softwareInfos(softwareInfo entity)
		{
			this.SendPropertyChanging();
			entity.programLanguage = this;
		}
		
		private void detach_softwareInfos(softwareInfo entity)
		{
			this.SendPropertyChanging();
			entity.programLanguage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.softwareInfo")]
	public partial class softwareInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _softwareCode;
		
		private string _softCodeDefine;
		
		private System.Nullable<short> _languageCode;
		
		private System.Nullable<short> _memariCode;
		
		private System.Nullable<short> _dbCode;
		
		private string _cityInUse;
		
		private string _softwareName;
		
		private string _serverLocation;
		
		private string _companyName;
		
		private string _softwarePrice;
		
		private System.Nullable<char> _isSupport;
		
		private string _endDateSupport;
		
		private string _supportPrice;
		
		private System.Nullable<char> _isUsed;
		
		private string _instalationDate;
		
		private string _contractNumber;
		
		private string _supportPeriodNumber;
		
		private string _supportPeriodType;
		
		private System.Nullable<char> _isHardwareLock;
		
		private System.Nullable<char> _isSource;
		
		private string _description;
		
		private string _lastDbVersion;
		
		private string _supervisorName;
		
		private string _supervisorTell;
		
		private string _companyNamayandeName;
		
		private string _supportTell;
		
		private System.Nullable<char> _isReportCreate;
		
		private System.Nullable<char> _isFixReport;
		
		private System.Nullable<short> _userCount;
		
		private System.Nullable<char> _isDocument;
		
		private string _softwareProblem;
		
		private System.Nullable<char> _isPatchUpdate;
		
		private System.Nullable<char> _isFtpUpdate;
		
		private System.Nullable<char> _isDirectAccessUpdate;
		
		private System.Nullable<char> _isOtherUpdate;
		
		private System.Nullable<char> _isOpBuyer;
		
		private System.Nullable<short> _userCode;
		
		private System.Nullable<bool> _deleted;
		
		private System.Nullable<short> _vahedCode;
		
		private System.Nullable<short> _zoneCode;
		
		private System.Nullable<char> _isAllVahed;
		
		private string _companyTell;
		
		private string _companyAddress;
		
		private string _subject;
		
		private EntitySet<upgrade> _upgrades;
		
		private EntityRef<DB> _DB;
		
		private EntityRef<memariSystem> _memariSystem;
		
		private EntityRef<programLanguage> _programLanguage;
		
		private EntityRef<zoneInfo> _zoneInfo;
		
		private EntityRef<userinfo> _userinfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsoftwareCodeChanging(short value);
    partial void OnsoftwareCodeChanged();
    partial void OnsoftCodeDefineChanging(string value);
    partial void OnsoftCodeDefineChanged();
    partial void OnlanguageCodeChanging(System.Nullable<short> value);
    partial void OnlanguageCodeChanged();
    partial void OnmemariCodeChanging(System.Nullable<short> value);
    partial void OnmemariCodeChanged();
    partial void OndbCodeChanging(System.Nullable<short> value);
    partial void OndbCodeChanged();
    partial void OncityInUseChanging(string value);
    partial void OncityInUseChanged();
    partial void OnsoftwareNameChanging(string value);
    partial void OnsoftwareNameChanged();
    partial void OnserverLocationChanging(string value);
    partial void OnserverLocationChanged();
    partial void OncompanyNameChanging(string value);
    partial void OncompanyNameChanged();
    partial void OnsoftwarePriceChanging(string value);
    partial void OnsoftwarePriceChanged();
    partial void OnisSupportChanging(System.Nullable<char> value);
    partial void OnisSupportChanged();
    partial void OnendDateSupportChanging(string value);
    partial void OnendDateSupportChanged();
    partial void OnsupportPriceChanging(string value);
    partial void OnsupportPriceChanged();
    partial void OnisUsedChanging(System.Nullable<char> value);
    partial void OnisUsedChanged();
    partial void OninstalationDateChanging(string value);
    partial void OninstalationDateChanged();
    partial void OncontractNumberChanging(string value);
    partial void OncontractNumberChanged();
    partial void OnsupportPeriodNumberChanging(string value);
    partial void OnsupportPeriodNumberChanged();
    partial void OnsupportPeriodTypeChanging(string value);
    partial void OnsupportPeriodTypeChanged();
    partial void OnisHardwareLockChanging(System.Nullable<char> value);
    partial void OnisHardwareLockChanged();
    partial void OnisSourceChanging(System.Nullable<char> value);
    partial void OnisSourceChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnlastDbVersionChanging(string value);
    partial void OnlastDbVersionChanged();
    partial void OnsupervisorNameChanging(string value);
    partial void OnsupervisorNameChanged();
    partial void OnsupervisorTellChanging(string value);
    partial void OnsupervisorTellChanged();
    partial void OncompanyNamayandeNameChanging(string value);
    partial void OncompanyNamayandeNameChanged();
    partial void OnsupportTellChanging(string value);
    partial void OnsupportTellChanged();
    partial void OnisReportCreateChanging(System.Nullable<char> value);
    partial void OnisReportCreateChanged();
    partial void OnisFixReportChanging(System.Nullable<char> value);
    partial void OnisFixReportChanged();
    partial void OnuserCountChanging(System.Nullable<short> value);
    partial void OnuserCountChanged();
    partial void OnisDocumentChanging(System.Nullable<char> value);
    partial void OnisDocumentChanged();
    partial void OnsoftwareProblemChanging(string value);
    partial void OnsoftwareProblemChanged();
    partial void OnisPatchUpdateChanging(System.Nullable<char> value);
    partial void OnisPatchUpdateChanged();
    partial void OnisFtpUpdateChanging(System.Nullable<char> value);
    partial void OnisFtpUpdateChanged();
    partial void OnisDirectAccessUpdateChanging(System.Nullable<char> value);
    partial void OnisDirectAccessUpdateChanged();
    partial void OnisOtherUpdateChanging(System.Nullable<char> value);
    partial void OnisOtherUpdateChanged();
    partial void OnisOpBuyerChanging(System.Nullable<char> value);
    partial void OnisOpBuyerChanged();
    partial void OnuserCodeChanging(System.Nullable<short> value);
    partial void OnuserCodeChanged();
    partial void OndeletedChanging(System.Nullable<bool> value);
    partial void OndeletedChanged();
    partial void OnvahedCodeChanging(System.Nullable<short> value);
    partial void OnvahedCodeChanged();
    partial void OnzoneCodeChanging(System.Nullable<short> value);
    partial void OnzoneCodeChanged();
    partial void OnisAllVahedChanging(System.Nullable<char> value);
    partial void OnisAllVahedChanged();
    partial void OncompanyTellChanging(string value);
    partial void OncompanyTellChanged();
    partial void OncompanyAddressChanging(string value);
    partial void OncompanyAddressChanged();
    partial void OnsubjectChanging(string value);
    partial void OnsubjectChanged();
    #endregion
		
		public softwareInfo()
		{
			this._upgrades = new EntitySet<upgrade>(new Action<upgrade>(this.attach_upgrades), new Action<upgrade>(this.detach_upgrades));
			this._DB = default(EntityRef<DB>);
			this._memariSystem = default(EntityRef<memariSystem>);
			this._programLanguage = default(EntityRef<programLanguage>);
			this._zoneInfo = default(EntityRef<zoneInfo>);
			this._userinfo = default(EntityRef<userinfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_softwareCode", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short softwareCode
		{
			get
			{
				return this._softwareCode;
			}
			set
			{
				if ((this._softwareCode != value))
				{
					this.OnsoftwareCodeChanging(value);
					this.SendPropertyChanging();
					this._softwareCode = value;
					this.SendPropertyChanged("softwareCode");
					this.OnsoftwareCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_softCodeDefine", DbType="VarChar(50)")]
		public string softCodeDefine
		{
			get
			{
				return this._softCodeDefine;
			}
			set
			{
				if ((this._softCodeDefine != value))
				{
					this.OnsoftCodeDefineChanging(value);
					this.SendPropertyChanging();
					this._softCodeDefine = value;
					this.SendPropertyChanged("softCodeDefine");
					this.OnsoftCodeDefineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_languageCode", DbType="SmallInt")]
		public System.Nullable<short> languageCode
		{
			get
			{
				return this._languageCode;
			}
			set
			{
				if ((this._languageCode != value))
				{
					if (this._programLanguage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._languageCode = value;
					this.SendPropertyChanged("languageCode");
					this.OnlanguageCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_memariCode", DbType="SmallInt")]
		public System.Nullable<short> memariCode
		{
			get
			{
				return this._memariCode;
			}
			set
			{
				if ((this._memariCode != value))
				{
					if (this._memariSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmemariCodeChanging(value);
					this.SendPropertyChanging();
					this._memariCode = value;
					this.SendPropertyChanged("memariCode");
					this.OnmemariCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dbCode", DbType="SmallInt")]
		public System.Nullable<short> dbCode
		{
			get
			{
				return this._dbCode;
			}
			set
			{
				if ((this._dbCode != value))
				{
					if (this._DB.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndbCodeChanging(value);
					this.SendPropertyChanging();
					this._dbCode = value;
					this.SendPropertyChanged("dbCode");
					this.OndbCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cityInUse", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string cityInUse
		{
			get
			{
				return this._cityInUse;
			}
			set
			{
				if ((this._cityInUse != value))
				{
					this.OncityInUseChanging(value);
					this.SendPropertyChanging();
					this._cityInUse = value;
					this.SendPropertyChanged("cityInUse");
					this.OncityInUseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_softwareName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string softwareName
		{
			get
			{
				return this._softwareName;
			}
			set
			{
				if ((this._softwareName != value))
				{
					this.OnsoftwareNameChanging(value);
					this.SendPropertyChanging();
					this._softwareName = value;
					this.SendPropertyChanged("softwareName");
					this.OnsoftwareNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serverLocation", DbType="NVarChar(50)")]
		public string serverLocation
		{
			get
			{
				return this._serverLocation;
			}
			set
			{
				if ((this._serverLocation != value))
				{
					this.OnserverLocationChanging(value);
					this.SendPropertyChanging();
					this._serverLocation = value;
					this.SendPropertyChanged("serverLocation");
					this.OnserverLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_companyName", DbType="NVarChar(50)")]
		public string companyName
		{
			get
			{
				return this._companyName;
			}
			set
			{
				if ((this._companyName != value))
				{
					this.OncompanyNameChanging(value);
					this.SendPropertyChanging();
					this._companyName = value;
					this.SendPropertyChanged("companyName");
					this.OncompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_softwarePrice", DbType="VarChar(11)")]
		public string softwarePrice
		{
			get
			{
				return this._softwarePrice;
			}
			set
			{
				if ((this._softwarePrice != value))
				{
					this.OnsoftwarePriceChanging(value);
					this.SendPropertyChanging();
					this._softwarePrice = value;
					this.SendPropertyChanged("softwarePrice");
					this.OnsoftwarePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isSupport", DbType="Char(1)")]
		public System.Nullable<char> isSupport
		{
			get
			{
				return this._isSupport;
			}
			set
			{
				if ((this._isSupport != value))
				{
					this.OnisSupportChanging(value);
					this.SendPropertyChanging();
					this._isSupport = value;
					this.SendPropertyChanged("isSupport");
					this.OnisSupportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endDateSupport", DbType="Char(10)")]
		public string endDateSupport
		{
			get
			{
				return this._endDateSupport;
			}
			set
			{
				if ((this._endDateSupport != value))
				{
					this.OnendDateSupportChanging(value);
					this.SendPropertyChanging();
					this._endDateSupport = value;
					this.SendPropertyChanged("endDateSupport");
					this.OnendDateSupportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_supportPrice", DbType="VarChar(11)")]
		public string supportPrice
		{
			get
			{
				return this._supportPrice;
			}
			set
			{
				if ((this._supportPrice != value))
				{
					this.OnsupportPriceChanging(value);
					this.SendPropertyChanging();
					this._supportPrice = value;
					this.SendPropertyChanged("supportPrice");
					this.OnsupportPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isUsed", DbType="Char(1)")]
		public System.Nullable<char> isUsed
		{
			get
			{
				return this._isUsed;
			}
			set
			{
				if ((this._isUsed != value))
				{
					this.OnisUsedChanging(value);
					this.SendPropertyChanging();
					this._isUsed = value;
					this.SendPropertyChanged("isUsed");
					this.OnisUsedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_instalationDate", DbType="Char(10)")]
		public string instalationDate
		{
			get
			{
				return this._instalationDate;
			}
			set
			{
				if ((this._instalationDate != value))
				{
					this.OninstalationDateChanging(value);
					this.SendPropertyChanging();
					this._instalationDate = value;
					this.SendPropertyChanged("instalationDate");
					this.OninstalationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contractNumber", DbType="VarChar(30)")]
		public string contractNumber
		{
			get
			{
				return this._contractNumber;
			}
			set
			{
				if ((this._contractNumber != value))
				{
					this.OncontractNumberChanging(value);
					this.SendPropertyChanging();
					this._contractNumber = value;
					this.SendPropertyChanged("contractNumber");
					this.OncontractNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_supportPeriodNumber", DbType="VarChar(3)")]
		public string supportPeriodNumber
		{
			get
			{
				return this._supportPeriodNumber;
			}
			set
			{
				if ((this._supportPeriodNumber != value))
				{
					this.OnsupportPeriodNumberChanging(value);
					this.SendPropertyChanging();
					this._supportPeriodNumber = value;
					this.SendPropertyChanged("supportPeriodNumber");
					this.OnsupportPeriodNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_supportPeriodType", DbType="NVarChar(5)")]
		public string supportPeriodType
		{
			get
			{
				return this._supportPeriodType;
			}
			set
			{
				if ((this._supportPeriodType != value))
				{
					this.OnsupportPeriodTypeChanging(value);
					this.SendPropertyChanging();
					this._supportPeriodType = value;
					this.SendPropertyChanged("supportPeriodType");
					this.OnsupportPeriodTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isHardwareLock", DbType="Char(1)")]
		public System.Nullable<char> isHardwareLock
		{
			get
			{
				return this._isHardwareLock;
			}
			set
			{
				if ((this._isHardwareLock != value))
				{
					this.OnisHardwareLockChanging(value);
					this.SendPropertyChanging();
					this._isHardwareLock = value;
					this.SendPropertyChanged("isHardwareLock");
					this.OnisHardwareLockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isSource", DbType="Char(1)")]
		public System.Nullable<char> isSource
		{
			get
			{
				return this._isSource;
			}
			set
			{
				if ((this._isSource != value))
				{
					this.OnisSourceChanging(value);
					this.SendPropertyChanging();
					this._isSource = value;
					this.SendPropertyChanged("isSource");
					this.OnisSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(300)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastDbVersion", DbType="VarChar(10)")]
		public string lastDbVersion
		{
			get
			{
				return this._lastDbVersion;
			}
			set
			{
				if ((this._lastDbVersion != value))
				{
					this.OnlastDbVersionChanging(value);
					this.SendPropertyChanging();
					this._lastDbVersion = value;
					this.SendPropertyChanged("lastDbVersion");
					this.OnlastDbVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_supervisorName", DbType="NVarChar(50)")]
		public string supervisorName
		{
			get
			{
				return this._supervisorName;
			}
			set
			{
				if ((this._supervisorName != value))
				{
					this.OnsupervisorNameChanging(value);
					this.SendPropertyChanging();
					this._supervisorName = value;
					this.SendPropertyChanged("supervisorName");
					this.OnsupervisorNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_supervisorTell", DbType="VarChar(11)")]
		public string supervisorTell
		{
			get
			{
				return this._supervisorTell;
			}
			set
			{
				if ((this._supervisorTell != value))
				{
					this.OnsupervisorTellChanging(value);
					this.SendPropertyChanging();
					this._supervisorTell = value;
					this.SendPropertyChanged("supervisorTell");
					this.OnsupervisorTellChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_companyNamayandeName", DbType="NVarChar(50)")]
		public string companyNamayandeName
		{
			get
			{
				return this._companyNamayandeName;
			}
			set
			{
				if ((this._companyNamayandeName != value))
				{
					this.OncompanyNamayandeNameChanging(value);
					this.SendPropertyChanging();
					this._companyNamayandeName = value;
					this.SendPropertyChanged("companyNamayandeName");
					this.OncompanyNamayandeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_supportTell", DbType="VarChar(11)")]
		public string supportTell
		{
			get
			{
				return this._supportTell;
			}
			set
			{
				if ((this._supportTell != value))
				{
					this.OnsupportTellChanging(value);
					this.SendPropertyChanging();
					this._supportTell = value;
					this.SendPropertyChanged("supportTell");
					this.OnsupportTellChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isReportCreate", DbType="Char(1)")]
		public System.Nullable<char> isReportCreate
		{
			get
			{
				return this._isReportCreate;
			}
			set
			{
				if ((this._isReportCreate != value))
				{
					this.OnisReportCreateChanging(value);
					this.SendPropertyChanging();
					this._isReportCreate = value;
					this.SendPropertyChanged("isReportCreate");
					this.OnisReportCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isFixReport", DbType="Char(1)")]
		public System.Nullable<char> isFixReport
		{
			get
			{
				return this._isFixReport;
			}
			set
			{
				if ((this._isFixReport != value))
				{
					this.OnisFixReportChanging(value);
					this.SendPropertyChanging();
					this._isFixReport = value;
					this.SendPropertyChanged("isFixReport");
					this.OnisFixReportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userCount", DbType="SmallInt")]
		public System.Nullable<short> userCount
		{
			get
			{
				return this._userCount;
			}
			set
			{
				if ((this._userCount != value))
				{
					this.OnuserCountChanging(value);
					this.SendPropertyChanging();
					this._userCount = value;
					this.SendPropertyChanged("userCount");
					this.OnuserCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isDocument", DbType="Char(1)")]
		public System.Nullable<char> isDocument
		{
			get
			{
				return this._isDocument;
			}
			set
			{
				if ((this._isDocument != value))
				{
					this.OnisDocumentChanging(value);
					this.SendPropertyChanging();
					this._isDocument = value;
					this.SendPropertyChanged("isDocument");
					this.OnisDocumentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_softwareProblem", DbType="NVarChar(500)")]
		public string softwareProblem
		{
			get
			{
				return this._softwareProblem;
			}
			set
			{
				if ((this._softwareProblem != value))
				{
					this.OnsoftwareProblemChanging(value);
					this.SendPropertyChanging();
					this._softwareProblem = value;
					this.SendPropertyChanged("softwareProblem");
					this.OnsoftwareProblemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isPatchUpdate", DbType="Char(1)")]
		public System.Nullable<char> isPatchUpdate
		{
			get
			{
				return this._isPatchUpdate;
			}
			set
			{
				if ((this._isPatchUpdate != value))
				{
					this.OnisPatchUpdateChanging(value);
					this.SendPropertyChanging();
					this._isPatchUpdate = value;
					this.SendPropertyChanged("isPatchUpdate");
					this.OnisPatchUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isFtpUpdate", DbType="Char(1)")]
		public System.Nullable<char> isFtpUpdate
		{
			get
			{
				return this._isFtpUpdate;
			}
			set
			{
				if ((this._isFtpUpdate != value))
				{
					this.OnisFtpUpdateChanging(value);
					this.SendPropertyChanging();
					this._isFtpUpdate = value;
					this.SendPropertyChanged("isFtpUpdate");
					this.OnisFtpUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isDirectAccessUpdate", DbType="Char(1)")]
		public System.Nullable<char> isDirectAccessUpdate
		{
			get
			{
				return this._isDirectAccessUpdate;
			}
			set
			{
				if ((this._isDirectAccessUpdate != value))
				{
					this.OnisDirectAccessUpdateChanging(value);
					this.SendPropertyChanging();
					this._isDirectAccessUpdate = value;
					this.SendPropertyChanged("isDirectAccessUpdate");
					this.OnisDirectAccessUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isOtherUpdate", DbType="Char(1)")]
		public System.Nullable<char> isOtherUpdate
		{
			get
			{
				return this._isOtherUpdate;
			}
			set
			{
				if ((this._isOtherUpdate != value))
				{
					this.OnisOtherUpdateChanging(value);
					this.SendPropertyChanging();
					this._isOtherUpdate = value;
					this.SendPropertyChanged("isOtherUpdate");
					this.OnisOtherUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isOpBuyer", DbType="Char(1)")]
		public System.Nullable<char> isOpBuyer
		{
			get
			{
				return this._isOpBuyer;
			}
			set
			{
				if ((this._isOpBuyer != value))
				{
					this.OnisOpBuyerChanging(value);
					this.SendPropertyChanging();
					this._isOpBuyer = value;
					this.SendPropertyChanged("isOpBuyer");
					this.OnisOpBuyerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userCode", DbType="SmallInt")]
		public System.Nullable<short> userCode
		{
			get
			{
				return this._userCode;
			}
			set
			{
				if ((this._userCode != value))
				{
					if (this._userinfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserCodeChanging(value);
					this.SendPropertyChanging();
					this._userCode = value;
					this.SendPropertyChanged("userCode");
					this.OnuserCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deleted", DbType="Bit")]
		public System.Nullable<bool> deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vahedCode", DbType="SmallInt")]
		public System.Nullable<short> vahedCode
		{
			get
			{
				return this._vahedCode;
			}
			set
			{
				if ((this._vahedCode != value))
				{
					this.OnvahedCodeChanging(value);
					this.SendPropertyChanging();
					this._vahedCode = value;
					this.SendPropertyChanged("vahedCode");
					this.OnvahedCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_zoneCode", DbType="SmallInt")]
		public System.Nullable<short> zoneCode
		{
			get
			{
				return this._zoneCode;
			}
			set
			{
				if ((this._zoneCode != value))
				{
					if (this._zoneInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnzoneCodeChanging(value);
					this.SendPropertyChanging();
					this._zoneCode = value;
					this.SendPropertyChanged("zoneCode");
					this.OnzoneCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isAllVahed", DbType="Char(1)")]
		public System.Nullable<char> isAllVahed
		{
			get
			{
				return this._isAllVahed;
			}
			set
			{
				if ((this._isAllVahed != value))
				{
					this.OnisAllVahedChanging(value);
					this.SendPropertyChanging();
					this._isAllVahed = value;
					this.SendPropertyChanged("isAllVahed");
					this.OnisAllVahedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_companyTell", DbType="VarChar(11)")]
		public string companyTell
		{
			get
			{
				return this._companyTell;
			}
			set
			{
				if ((this._companyTell != value))
				{
					this.OncompanyTellChanging(value);
					this.SendPropertyChanging();
					this._companyTell = value;
					this.SendPropertyChanged("companyTell");
					this.OncompanyTellChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_companyAddress", DbType="NVarChar(100)")]
		public string companyAddress
		{
			get
			{
				return this._companyAddress;
			}
			set
			{
				if ((this._companyAddress != value))
				{
					this.OncompanyAddressChanging(value);
					this.SendPropertyChanging();
					this._companyAddress = value;
					this.SendPropertyChanged("companyAddress");
					this.OncompanyAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subject", DbType="NVarChar(40)")]
		public string subject
		{
			get
			{
				return this._subject;
			}
			set
			{
				if ((this._subject != value))
				{
					this.OnsubjectChanging(value);
					this.SendPropertyChanging();
					this._subject = value;
					this.SendPropertyChanged("subject");
					this.OnsubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="softwareInfo_upgrade", Storage="_upgrades", ThisKey="softwareCode", OtherKey="softwareCode")]
		public EntitySet<upgrade> upgrades
		{
			get
			{
				return this._upgrades;
			}
			set
			{
				this._upgrades.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_softwareInfo", Storage="_DB", ThisKey="dbCode", OtherKey="dbCode", IsForeignKey=true)]
		public DB DB
		{
			get
			{
				return this._DB.Entity;
			}
			set
			{
				DB previousValue = this._DB.Entity;
				if (((previousValue != value) 
							|| (this._DB.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB.Entity = null;
						previousValue.softwareInfos.Remove(this);
					}
					this._DB.Entity = value;
					if ((value != null))
					{
						value.softwareInfos.Add(this);
						this._dbCode = value.dbCode;
					}
					else
					{
						this._dbCode = default(Nullable<short>);
					}
					this.SendPropertyChanged("DB");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="memariSystem_softwareInfo", Storage="_memariSystem", ThisKey="memariCode", OtherKey="memariCode", IsForeignKey=true)]
		public memariSystem memariSystem
		{
			get
			{
				return this._memariSystem.Entity;
			}
			set
			{
				memariSystem previousValue = this._memariSystem.Entity;
				if (((previousValue != value) 
							|| (this._memariSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._memariSystem.Entity = null;
						previousValue.softwareInfos.Remove(this);
					}
					this._memariSystem.Entity = value;
					if ((value != null))
					{
						value.softwareInfos.Add(this);
						this._memariCode = value.memariCode;
					}
					else
					{
						this._memariCode = default(Nullable<short>);
					}
					this.SendPropertyChanged("memariSystem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="programLanguage_softwareInfo", Storage="_programLanguage", ThisKey="languageCode", OtherKey="programLangCode", IsForeignKey=true)]
		public programLanguage programLanguage
		{
			get
			{
				return this._programLanguage.Entity;
			}
			set
			{
				programLanguage previousValue = this._programLanguage.Entity;
				if (((previousValue != value) 
							|| (this._programLanguage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._programLanguage.Entity = null;
						previousValue.softwareInfos.Remove(this);
					}
					this._programLanguage.Entity = value;
					if ((value != null))
					{
						value.softwareInfos.Add(this);
						this._languageCode = value.programLangCode;
					}
					else
					{
						this._languageCode = default(Nullable<short>);
					}
					this.SendPropertyChanged("programLanguage");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zoneInfo_softwareInfo", Storage="_zoneInfo", ThisKey="zoneCode", OtherKey="zoneCode", IsForeignKey=true)]
		public zoneInfo zoneInfo
		{
			get
			{
				return this._zoneInfo.Entity;
			}
			set
			{
				zoneInfo previousValue = this._zoneInfo.Entity;
				if (((previousValue != value) 
							|| (this._zoneInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._zoneInfo.Entity = null;
						previousValue.softwareInfos.Remove(this);
					}
					this._zoneInfo.Entity = value;
					if ((value != null))
					{
						value.softwareInfos.Add(this);
						this._zoneCode = value.zoneCode;
					}
					else
					{
						this._zoneCode = default(Nullable<short>);
					}
					this.SendPropertyChanged("zoneInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userinfo_softwareInfo", Storage="_userinfo", ThisKey="userCode", OtherKey="userCode", IsForeignKey=true)]
		public userinfo userinfo
		{
			get
			{
				return this._userinfo.Entity;
			}
			set
			{
				userinfo previousValue = this._userinfo.Entity;
				if (((previousValue != value) 
							|| (this._userinfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userinfo.Entity = null;
						previousValue.softwareInfos.Remove(this);
					}
					this._userinfo.Entity = value;
					if ((value != null))
					{
						value.softwareInfos.Add(this);
						this._userCode = value.userCode;
					}
					else
					{
						this._userCode = default(Nullable<short>);
					}
					this.SendPropertyChanged("userinfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_upgrades(upgrade entity)
		{
			this.SendPropertyChanging();
			entity.softwareInfo = this;
		}
		
		private void detach_upgrades(upgrade entity)
		{
			this.SendPropertyChanging();
			entity.softwareInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.upgrade")]
	public partial class upgrade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _upgradeCode;
		
		private System.Nullable<short> _softwareCode;
		
		private string _upgradeDate;
		
		private System.Nullable<short> _vahedCode;
		
		private string _description;
		
		private System.Nullable<bool> _deleted;
		
		private EntityRef<softwareInfo> _softwareInfo;
		
		private EntityRef<vahedInfo> _vahedInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnupgradeCodeChanging(short value);
    partial void OnupgradeCodeChanged();
    partial void OnsoftwareCodeChanging(System.Nullable<short> value);
    partial void OnsoftwareCodeChanged();
    partial void OnupgradeDateChanging(string value);
    partial void OnupgradeDateChanged();
    partial void OnvahedCodeChanging(System.Nullable<short> value);
    partial void OnvahedCodeChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OndeletedChanging(System.Nullable<bool> value);
    partial void OndeletedChanged();
    #endregion
		
		public upgrade()
		{
			this._softwareInfo = default(EntityRef<softwareInfo>);
			this._vahedInfo = default(EntityRef<vahedInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_upgradeCode", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short upgradeCode
		{
			get
			{
				return this._upgradeCode;
			}
			set
			{
				if ((this._upgradeCode != value))
				{
					this.OnupgradeCodeChanging(value);
					this.SendPropertyChanging();
					this._upgradeCode = value;
					this.SendPropertyChanged("upgradeCode");
					this.OnupgradeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_softwareCode", DbType="SmallInt")]
		public System.Nullable<short> softwareCode
		{
			get
			{
				return this._softwareCode;
			}
			set
			{
				if ((this._softwareCode != value))
				{
					if (this._softwareInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsoftwareCodeChanging(value);
					this.SendPropertyChanging();
					this._softwareCode = value;
					this.SendPropertyChanged("softwareCode");
					this.OnsoftwareCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_upgradeDate", DbType="Char(10)")]
		public string upgradeDate
		{
			get
			{
				return this._upgradeDate;
			}
			set
			{
				if ((this._upgradeDate != value))
				{
					this.OnupgradeDateChanging(value);
					this.SendPropertyChanging();
					this._upgradeDate = value;
					this.SendPropertyChanged("upgradeDate");
					this.OnupgradeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vahedCode", DbType="SmallInt")]
		public System.Nullable<short> vahedCode
		{
			get
			{
				return this._vahedCode;
			}
			set
			{
				if ((this._vahedCode != value))
				{
					if (this._vahedInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnvahedCodeChanging(value);
					this.SendPropertyChanging();
					this._vahedCode = value;
					this.SendPropertyChanged("vahedCode");
					this.OnvahedCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(500)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deleted", DbType="Bit")]
		public System.Nullable<bool> deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="softwareInfo_upgrade", Storage="_softwareInfo", ThisKey="softwareCode", OtherKey="softwareCode", IsForeignKey=true)]
		public softwareInfo softwareInfo
		{
			get
			{
				return this._softwareInfo.Entity;
			}
			set
			{
				softwareInfo previousValue = this._softwareInfo.Entity;
				if (((previousValue != value) 
							|| (this._softwareInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._softwareInfo.Entity = null;
						previousValue.upgrades.Remove(this);
					}
					this._softwareInfo.Entity = value;
					if ((value != null))
					{
						value.upgrades.Add(this);
						this._softwareCode = value.softwareCode;
					}
					else
					{
						this._softwareCode = default(Nullable<short>);
					}
					this.SendPropertyChanged("softwareInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="vahedInfo_upgrade", Storage="_vahedInfo", ThisKey="vahedCode", OtherKey="vahedCode", IsForeignKey=true)]
		public vahedInfo vahedInfo
		{
			get
			{
				return this._vahedInfo.Entity;
			}
			set
			{
				vahedInfo previousValue = this._vahedInfo.Entity;
				if (((previousValue != value) 
							|| (this._vahedInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._vahedInfo.Entity = null;
						previousValue.upgrades.Remove(this);
					}
					this._vahedInfo.Entity = value;
					if ((value != null))
					{
						value.upgrades.Add(this);
						this._vahedCode = value.vahedCode;
					}
					else
					{
						this._vahedCode = default(Nullable<short>);
					}
					this.SendPropertyChanged("vahedInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.userinfo")]
	public partial class userinfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _userCode;
		
		private string _fName;
		
		private string _lName;
		
		private string _userName;
		
		private string _pass;
		
		private string _email;
		
		private string _mobile;
		
		private short _zoneCode;
		
		private System.Nullable<bool> _deleted;
		
		private System.Nullable<bool> _admin;
		
		private EntitySet<accessUser> _accessUsers;
		
		private EntitySet<softwareInfo> _softwareInfos;
		
		private EntitySet<VahedUser> _VahedUsers;
		
		private EntityRef<zoneInfo> _zoneInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserCodeChanging(short value);
    partial void OnuserCodeChanged();
    partial void OnfNameChanging(string value);
    partial void OnfNameChanged();
    partial void OnlNameChanging(string value);
    partial void OnlNameChanged();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OnpassChanging(string value);
    partial void OnpassChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnmobileChanging(string value);
    partial void OnmobileChanged();
    partial void OnzoneCodeChanging(short value);
    partial void OnzoneCodeChanged();
    partial void OndeletedChanging(System.Nullable<bool> value);
    partial void OndeletedChanged();
    partial void OnadminChanging(System.Nullable<bool> value);
    partial void OnadminChanged();
    #endregion
		
		public userinfo()
		{
			this._accessUsers = new EntitySet<accessUser>(new Action<accessUser>(this.attach_accessUsers), new Action<accessUser>(this.detach_accessUsers));
			this._softwareInfos = new EntitySet<softwareInfo>(new Action<softwareInfo>(this.attach_softwareInfos), new Action<softwareInfo>(this.detach_softwareInfos));
			this._VahedUsers = new EntitySet<VahedUser>(new Action<VahedUser>(this.attach_VahedUsers), new Action<VahedUser>(this.detach_VahedUsers));
			this._zoneInfo = default(EntityRef<zoneInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userCode", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short userCode
		{
			get
			{
				return this._userCode;
			}
			set
			{
				if ((this._userCode != value))
				{
					this.OnuserCodeChanging(value);
					this.SendPropertyChanging();
					this._userCode = value;
					this.SendPropertyChanged("userCode");
					this.OnuserCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string fName
		{
			get
			{
				return this._fName;
			}
			set
			{
				if ((this._fName != value))
				{
					this.OnfNameChanging(value);
					this.SendPropertyChanging();
					this._fName = value;
					this.SendPropertyChanged("fName");
					this.OnfNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string lName
		{
			get
			{
				return this._lName;
			}
			set
			{
				if ((this._lName != value))
				{
					this.OnlNameChanging(value);
					this.SendPropertyChanging();
					this._lName = value;
					this.SendPropertyChanged("lName");
					this.OnlNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pass", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string pass
		{
			get
			{
				return this._pass;
			}
			set
			{
				if ((this._pass != value))
				{
					this.OnpassChanging(value);
					this.SendPropertyChanging();
					this._pass = value;
					this.SendPropertyChanged("pass");
					this.OnpassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mobile", DbType="Char(11)")]
		public string mobile
		{
			get
			{
				return this._mobile;
			}
			set
			{
				if ((this._mobile != value))
				{
					this.OnmobileChanging(value);
					this.SendPropertyChanging();
					this._mobile = value;
					this.SendPropertyChanged("mobile");
					this.OnmobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_zoneCode", DbType="SmallInt NOT NULL")]
		public short zoneCode
		{
			get
			{
				return this._zoneCode;
			}
			set
			{
				if ((this._zoneCode != value))
				{
					if (this._zoneInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnzoneCodeChanging(value);
					this.SendPropertyChanging();
					this._zoneCode = value;
					this.SendPropertyChanged("zoneCode");
					this.OnzoneCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deleted", DbType="Bit")]
		public System.Nullable<bool> deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_admin", DbType="Bit")]
		public System.Nullable<bool> admin
		{
			get
			{
				return this._admin;
			}
			set
			{
				if ((this._admin != value))
				{
					this.OnadminChanging(value);
					this.SendPropertyChanging();
					this._admin = value;
					this.SendPropertyChanged("admin");
					this.OnadminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userinfo_accessUser", Storage="_accessUsers", ThisKey="userCode", OtherKey="userCode")]
		public EntitySet<accessUser> accessUsers
		{
			get
			{
				return this._accessUsers;
			}
			set
			{
				this._accessUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userinfo_softwareInfo", Storage="_softwareInfos", ThisKey="userCode", OtherKey="userCode")]
		public EntitySet<softwareInfo> softwareInfos
		{
			get
			{
				return this._softwareInfos;
			}
			set
			{
				this._softwareInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userinfo_VahedUser", Storage="_VahedUsers", ThisKey="userCode", OtherKey="userCode")]
		public EntitySet<VahedUser> VahedUsers
		{
			get
			{
				return this._VahedUsers;
			}
			set
			{
				this._VahedUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zoneInfo_userinfo", Storage="_zoneInfo", ThisKey="zoneCode", OtherKey="zoneCode", IsForeignKey=true)]
		public zoneInfo zoneInfo
		{
			get
			{
				return this._zoneInfo.Entity;
			}
			set
			{
				zoneInfo previousValue = this._zoneInfo.Entity;
				if (((previousValue != value) 
							|| (this._zoneInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._zoneInfo.Entity = null;
						previousValue.userinfos.Remove(this);
					}
					this._zoneInfo.Entity = value;
					if ((value != null))
					{
						value.userinfos.Add(this);
						this._zoneCode = value.zoneCode;
					}
					else
					{
						this._zoneCode = default(short);
					}
					this.SendPropertyChanged("zoneInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_accessUsers(accessUser entity)
		{
			this.SendPropertyChanging();
			entity.userinfo = this;
		}
		
		private void detach_accessUsers(accessUser entity)
		{
			this.SendPropertyChanging();
			entity.userinfo = null;
		}
		
		private void attach_softwareInfos(softwareInfo entity)
		{
			this.SendPropertyChanging();
			entity.userinfo = this;
		}
		
		private void detach_softwareInfos(softwareInfo entity)
		{
			this.SendPropertyChanging();
			entity.userinfo = null;
		}
		
		private void attach_VahedUsers(VahedUser entity)
		{
			this.SendPropertyChanging();
			entity.userinfo = this;
		}
		
		private void detach_VahedUsers(VahedUser entity)
		{
			this.SendPropertyChanging();
			entity.userinfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vahedInfo")]
	public partial class vahedInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _vahedCode;
		
		private string _vahedName;
		
		private string _city;
		
		private bool _deleted;
		
		private EntitySet<accessUser> _accessUsers;
		
		private EntitySet<upgrade> _upgrades;
		
		private EntitySet<VahedUser> _VahedUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnvahedCodeChanging(short value);
    partial void OnvahedCodeChanged();
    partial void OnvahedNameChanging(string value);
    partial void OnvahedNameChanged();
    partial void OncityChanging(string value);
    partial void OncityChanged();
    partial void OndeletedChanging(bool value);
    partial void OndeletedChanged();
    #endregion
		
		public vahedInfo()
		{
			this._accessUsers = new EntitySet<accessUser>(new Action<accessUser>(this.attach_accessUsers), new Action<accessUser>(this.detach_accessUsers));
			this._upgrades = new EntitySet<upgrade>(new Action<upgrade>(this.attach_upgrades), new Action<upgrade>(this.detach_upgrades));
			this._VahedUsers = new EntitySet<VahedUser>(new Action<VahedUser>(this.attach_VahedUsers), new Action<VahedUser>(this.detach_VahedUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vahedCode", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short vahedCode
		{
			get
			{
				return this._vahedCode;
			}
			set
			{
				if ((this._vahedCode != value))
				{
					this.OnvahedCodeChanging(value);
					this.SendPropertyChanging();
					this._vahedCode = value;
					this.SendPropertyChanged("vahedCode");
					this.OnvahedCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vahedName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string vahedName
		{
			get
			{
				return this._vahedName;
			}
			set
			{
				if ((this._vahedName != value))
				{
					this.OnvahedNameChanging(value);
					this.SendPropertyChanging();
					this._vahedName = value;
					this.SendPropertyChanged("vahedName");
					this.OnvahedNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_city", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string city
		{
			get
			{
				return this._city;
			}
			set
			{
				if ((this._city != value))
				{
					this.OncityChanging(value);
					this.SendPropertyChanging();
					this._city = value;
					this.SendPropertyChanged("city");
					this.OncityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deleted", DbType="Bit NOT NULL")]
		public bool deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="vahedInfo_accessUser", Storage="_accessUsers", ThisKey="vahedCode", OtherKey="vahedCode")]
		public EntitySet<accessUser> accessUsers
		{
			get
			{
				return this._accessUsers;
			}
			set
			{
				this._accessUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="vahedInfo_upgrade", Storage="_upgrades", ThisKey="vahedCode", OtherKey="vahedCode")]
		public EntitySet<upgrade> upgrades
		{
			get
			{
				return this._upgrades;
			}
			set
			{
				this._upgrades.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="vahedInfo_VahedUser", Storage="_VahedUsers", ThisKey="vahedCode", OtherKey="vahedCode")]
		public EntitySet<VahedUser> VahedUsers
		{
			get
			{
				return this._VahedUsers;
			}
			set
			{
				this._VahedUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_accessUsers(accessUser entity)
		{
			this.SendPropertyChanging();
			entity.vahedInfo = this;
		}
		
		private void detach_accessUsers(accessUser entity)
		{
			this.SendPropertyChanging();
			entity.vahedInfo = null;
		}
		
		private void attach_upgrades(upgrade entity)
		{
			this.SendPropertyChanging();
			entity.vahedInfo = this;
		}
		
		private void detach_upgrades(upgrade entity)
		{
			this.SendPropertyChanging();
			entity.vahedInfo = null;
		}
		
		private void attach_VahedUsers(VahedUser entity)
		{
			this.SendPropertyChanging();
			entity.vahedInfo = this;
		}
		
		private void detach_VahedUsers(VahedUser entity)
		{
			this.SendPropertyChanging();
			entity.vahedInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VahedUser")]
	public partial class VahedUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<short> _vahedCode;
		
		private short _userCode;
		
		private System.Nullable<bool> _deleted;
		
		private EntityRef<userinfo> _userinfo;
		
		private EntityRef<vahedInfo> _vahedInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnvahedCodeChanging(System.Nullable<short> value);
    partial void OnvahedCodeChanged();
    partial void OnuserCodeChanging(short value);
    partial void OnuserCodeChanged();
    partial void OndeletedChanging(System.Nullable<bool> value);
    partial void OndeletedChanged();
    #endregion
		
		public VahedUser()
		{
			this._userinfo = default(EntityRef<userinfo>);
			this._vahedInfo = default(EntityRef<vahedInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vahedCode", DbType="SmallInt")]
		public System.Nullable<short> vahedCode
		{
			get
			{
				return this._vahedCode;
			}
			set
			{
				if ((this._vahedCode != value))
				{
					if (this._vahedInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnvahedCodeChanging(value);
					this.SendPropertyChanging();
					this._vahedCode = value;
					this.SendPropertyChanged("vahedCode");
					this.OnvahedCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userCode", DbType="SmallInt NOT NULL")]
		public short userCode
		{
			get
			{
				return this._userCode;
			}
			set
			{
				if ((this._userCode != value))
				{
					if (this._userinfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserCodeChanging(value);
					this.SendPropertyChanging();
					this._userCode = value;
					this.SendPropertyChanged("userCode");
					this.OnuserCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deleted", DbType="Bit")]
		public System.Nullable<bool> deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userinfo_VahedUser", Storage="_userinfo", ThisKey="userCode", OtherKey="userCode", IsForeignKey=true)]
		public userinfo userinfo
		{
			get
			{
				return this._userinfo.Entity;
			}
			set
			{
				userinfo previousValue = this._userinfo.Entity;
				if (((previousValue != value) 
							|| (this._userinfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userinfo.Entity = null;
						previousValue.VahedUsers.Remove(this);
					}
					this._userinfo.Entity = value;
					if ((value != null))
					{
						value.VahedUsers.Add(this);
						this._userCode = value.userCode;
					}
					else
					{
						this._userCode = default(short);
					}
					this.SendPropertyChanged("userinfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="vahedInfo_VahedUser", Storage="_vahedInfo", ThisKey="vahedCode", OtherKey="vahedCode", IsForeignKey=true)]
		public vahedInfo vahedInfo
		{
			get
			{
				return this._vahedInfo.Entity;
			}
			set
			{
				vahedInfo previousValue = this._vahedInfo.Entity;
				if (((previousValue != value) 
							|| (this._vahedInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._vahedInfo.Entity = null;
						previousValue.VahedUsers.Remove(this);
					}
					this._vahedInfo.Entity = value;
					if ((value != null))
					{
						value.VahedUsers.Add(this);
						this._vahedCode = value.vahedCode;
					}
					else
					{
						this._vahedCode = default(Nullable<short>);
					}
					this.SendPropertyChanged("vahedInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
